#! /usr/local/bin/pythonw
#
# File: "Tweets Are For Kids", version 2.0
# file name: readtweetsml_v2.py
#
# This file takes input in the form generated by quering the Twitter Search API for tweets messages containing a particular hashtag, along with the publishing date and author.
# "date","message","username" and converts it to a 1-mode digraph of Twitter users.
#
# An R script for generating csv files of tweets from the Twitter Search API compatible with this script can be found at: http://www.russellshepherd.com/d/?q=blog/replacing-twapperkeeper-r
#
# This program accepts two arguments: the input file and the output filename, call the script: python readtweetsml_v2.py inputfilenamehere.csv outputfilenamehere.txt
#
# Input details:
# The input file should be in csv format.
# The "date" field is formatted as: DoW, dd MMM YYYY HH:MM:SS +0000
# Example: "Fri, 08 Jan 2012, 13:22:45 +0000"
# +0000 refers to the timezone
# 
# The message field can contain any characters allowed by Twitter, as well as Retweets and Tweet-ats and Hash-tags.
# Example: "RT@cnn @johndoe Protest in Egypt #jan25"
# 
# The author field comes in the format: "username@twitter.com (Authorname)".
#
# Output details:
# This script creates an edgelist of a 1-mode digraph of Twitter users, where a directed tie is assume to exist between two users if:
# 1. The author includes tweet-at to another user. A directed tie is create from the author to the mentioned user.
# 2. The author includes a retweet from the original author of a message. In this case, a directed tie is create from user mentioned in the re-tweet to the author.
# For example, the tweet "RT@cnn @johndoe Protest in Egypt #jan25" by user1 would create two ties:
# 1. From user1 to johndoe
# 2. From cnn to user1
#
# The first line out the output file contains a timestamp, the last line contains information on the numebr of tweets and edges.
#
#
# Released under Creative Commons (BY, NC, SA) by Russell Shepherd - russell.l.shepherd@gmail.com

import sys
import re
import datetime

# Get file names 
f = open(sys.argv[1])
target = open(sys.argv[2], "w")

# Read source file
unparsedTweets = f.read()

# Find individual tweets, load into array "parsedTweets"
newentry = re.compile(r'\n"[a-zA-Z]{3,3}.+?(?=\n"[a-zA-Z]{3,3}|\Z)', re.DOTALL)
parsedTweets = newentry.findall(unparsedTweets)

# Compile regex statements to find the date of message ("tweettime"), any retweets in message ("retweet"), any tweet-ats ("tweetat"), and the username of message author ("usr")

tweettime = re.compile(r'(?<="[a-zA-Z]{3,3},\s)\d{2,2}\s*[a-zA-Z]{3,3}\s\d{4,4}\s(\d{2,2}:){2,2}\d{2,2}\s(\+\d{4,4})(?=")', re.MULTILINE) # Timestamp (pubDate) regex statement
retweet = re.compile(r'(?<=RT\s@)[\w_]+(?=[\s:,])', re.IGNORECASE|re.MULTILINE)			# Retweet regex statement
tweetat = re.compile(r'(?<!RT\s@)(?<=@)[\w_]+(?=[\s:,])', re.IGNORECASE|re.MULTILINE)	# Tweet-at regex statement
usr = re.compile(r'(?<=,")[\w\W][^,]+(?=@twitter.com \()', re.IGNORECASE|re.MULTILINE)	# Username of author

# Time stamp our results file
x = str("Results created at " + str(datetime.datetime.today()) +" :\n\n")
target.write(x)

# Initiate the tweet and edge counter
numberofTweets = 0
numberofEdges = 0

# Loop through all parsed tweets, feed each tweet in "line"
for line in parsedTweets:
	pubDate = tweettime.search(line) # Look for timestamp
	RT = retweet.search(line) 		 # Look for retweets
	AT = tweetat.findall(line)    	 # Look for tweet-ats
	SN = usr.search(line)            # Look for the username of the author
	
	# If message is a retweet, create an edge leading from the original poster (mentioned in retweet) and the current author.
	if RT:
		toPrint = str(RT.group() + ',' + SN.group() + ',' + pubDate.group() + '\n')	# Create a string specifing a Retweet edge.
		toPrintStr = toPrint.lower() 		# Set all usernames to lowercase, as twitter is case-insensative.
		target.write(toPrintStr) 			# Print retweet edge to file.
		numberofEdges = numberofEdges + 1	# Increase edge count.
		
	# If the message contains tweet-ats, create a edge from the current author to each user tweeted at.
	if AT:
		for s in AT:
			toPrint = str(SN.group() + ',' + s + ',' + pubDate.group() +'\n')   # Create a string specifing a Tweet-at edge.
			toPrintStr = toPrint.lower()        # Set all usernames to lowercase.
    		target.write(toPrintStr) 			# Print Tweet-at edge to file.
    		numberofEdges = numberofEdges + 1	# Increase edge count.
            
	numberofTweets = numberofTweets + 1

# Print number of tweets processed, and edges produce
y = str('\n\nTotal number of tweets processed: ' + str(numberofTweets) + ', produced ' + str(numberofEdges) + ' edges.')
target.write(y)